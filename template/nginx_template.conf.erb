##################################### NGINX ####################################
#                                                                              #
# Nginx configuration
# Generated on: <%= Date.today %> <%= Time.now %>
# DO NOT EDIT, this file is auto-generated!!!
# Based on : http://www.meteorpedia.com/read/nginx
# Generator is here: https://github.com/vnorguet/nginx_generator
#                                                                              #
################################################################################

################################# INSTRUCTIONS #################################
#                                                                              #
# COPY TO /etc/nginx/site-available/<%= tenant.timestamped_conf_file_name %>
# ENABLE sudo ln -s /etc/nginx/sites-available/<%= tenant.timestamped_conf_file_name %> /etc/nginx/sites-enabled/<%= tenant.conf_file_name %>
#                                                                              #
################################################################################

################################## INFORMATION #################################
#                                                                              #
# TENANT: <%= tenant.tenant %>
# DOMAIN: <%= tenant.domain %>
# STAGE PORT: <%= tenant.stage_port %>
# PRODUCTION PORT: <%= tenant.prod_port %>
# VERSION (UTC): <%= Time.now.strftime "%d/%m/%Y_%H:%M:%S" %>
#                                                                              #
################################################################################

# We're in the http context here
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

<% if tenant.enable_stage? %>
# Stage upstream
upstream <%= tenant.stage_upstream %> {
  server 127.0.0.1:<%= tenant.stage_port %>;
}

# Stage
server {
  listen 80;
  server_name <%= tenant.stage %>;

  location / {
    proxy_pass http://<%= tenant.stage_upstream %>;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
}
<% end -%>

# Production upstream
upstream <%= tenant.prod_upstream %> {
  server 127.0.0.1:<%= tenant.prod_port %>;
}
<% if tenant.www_to_not_www? %>
# Redirect www to not www both in http and https modes
server {
  listen 80;
  listen 443 ssl;
  server_name www.<%= tenant.prod %>;

  ssl on;
  ssl_certificate /etc/letsencrypt/live/www.<%= tenant.prod %>/cert.pem;
  ssl_certificate_key /etc/letsencrypt/live/www.<%= tenant.prod %>/privkey.pem;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # don@~Yt use SSLv3 ref: POODLE
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  # add Strict-Transport-Security to prevent man in the middle attacks
  add_header Strict-Transport-Security "max-age=31536000";
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
  # We use ^~ here, so that we don't check other regexes (for speed-up). We actually MUST cancel
  # other regex checks, because in our other config files have regex rule that denies access to files with dotted names.
  location ^~ /.well-known/acme-challenge/ {

      # Set correct content type. According to this:
      # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
      # Current specification requires "text/plain" or no content header at all.
      # It seems that "text/plain" is a safe option.
      default_type "text/plain";


      # This directory must be the same as in /etc/letsencrypt/cli.ini
      # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
      # there to "webroot".
      # Do NOT use alias, use root! Target directory is located here:
      # /var/www/common/letsencrypt/.well-known/acme-challenge/
      root /home/ubuntu/ssl_webroot;
  }

  # Hide /acme-challenge subdirectory and return 404 on all requests.
  # It is somewhat more secure than letting Nginx return 403.
  # Ending slash is important!
  location = /.well-known/acme-challenge/ {
    return 200;
  }

  location / {
    rewrite ^(.*) https://stages3e.loiret.fr$1 permanent;
  }
}
<% end -%>

<% if tenant.enable_ssl? %>
# Production SSL
server {
  listen 443 ssl;
  server_name <%= tenant.prod %>;

  ssl on;
  ssl_certificate /etc/letsencrypt/live/<%= tenant.prod %>/cert.pem;
  ssl_certificate_key /etc/letsencrypt/live/<%= tenant.prod %>/privkey.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # donâ€™t use SSLv3 ref: POODLE

  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  # add Strict-Transport-Security to prevent man in the middle attacks
  add_header Strict-Transport-Security "max-age=31536000";
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  location / {
    proxy_pass http://<%= tenant.prod_upstream %>;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $http_host;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forward-Proto http;
    proxy_set_header X-Nginx-Proxy true;

    proxy_redirect off;
  }
}
<% end -%>
# Production SSL Redirection from HTTP
server {
  listen 80;
  server_name <%= tenant.prod %>;

  <% if tenant.enable_ssl? %>
  # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
  # We use ^~ here, so that we don't check other regexes (for speed-up). We actually MUST cancel
  # other regex checks, because in our other config files have regex rule that denies access to files with dotted names.
  location ^~ /.well-known/acme-challenge/ {

      # Set correct content type. According to this:
      # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
      # Current specification requires "text/plain" or no content header at all.
      # It seems that "text/plain" is a safe option.
      default_type "text/plain";

      # This directory must be the same as in /etc/letsencrypt/cli.ini
      # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
      # there to "webroot".
      # Do NOT use alias, use root! Target directory is located here:
      # /var/www/common/letsencrypt/.well-known/acme-challenge/
      root /home/ubuntu/ssl_webroot;
  }

  # Hide /acme-challenge subdirectory and return 404 on all requests.
  # It is somewhat more secure than letting Nginx return 403.
  # Ending slash is important!
  location = /.well-known/acme-challenge/ {
    return 200;
  }

  location / {
    return 301 https://<%= tenant.prod %>$request_uri;
  }

  <% else %>

  location / {
    proxy_pass http://<%= tenant.prod_upstream %>;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
  <% end -%>
}
